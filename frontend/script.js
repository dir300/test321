// State management
let cart = [];
let products = [];
let categories = [];
let currentUser = null;
let currentCategory = 'all';

// API configuration
const API_BASE_URL = window.location.origin + '/api';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function initApp() {
    showLoading(true);
    
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
        await initTelegramApp();
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        await loadInitialData();
        
        // –†–µ–Ω–¥–µ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        renderCategories();
        renderProducts();
        updateCartUI();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
    } finally {
        showLoading(false);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram App
async function initTelegramApp() {
    if (window.Telegram && window.Telegram.WebApp) {
        const tg = window.Telegram.WebApp;
        tg.expand();
        tg.enableClosingConfirmation();
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (tg.initDataUnsafe && tg.initDataUnsafe.user) {
            currentUser = tg.initDataUnsafe.user;
            await authenticateUser(currentUser);
        } else {
            // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–Ω–µ Telegram
            currentUser = {
                id: 123456789,
                first_name: '–¢–µ—Å—Ç–æ–≤—ã–π',
                last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                username: 'test_user',
                is_bot: false
            };
            await authenticateUser(currentUser);
        }
        
        updateUserInfo();
    } else {
        // –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        console.warn('Telegram Web App not found, running in test mode');
        currentUser = {
            id: 123456789,
            first_name: '–¢–µ—Å—Ç–æ–≤—ã–π',
            last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            username: 'test_user',
            is_bot: false
        };
        await authenticateUser(currentUser);
        updateUserInfo();
    }
}

// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function authenticateUser(userData) {
    try {
        const response = await fetch(`${API_BASE_URL}/auth`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(userData)
        });
        
        const result = await response.json();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–∞ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
        if (result.isAdmin) {
            document.getElementById('adminBtn').style.display = 'block';
            document.getElementById('adminBtn').onclick = () => {
                window.open('./admin.html', '_blank');
            };
        }
        
    } catch (error) {
        console.warn('Auth failed, continuing without admin rights');
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ÂàùÂßãÊï∞ÊçÆ
async function loadInitialData() {
    try {
        const [productsResponse, categoriesResponse] = await Promise.all([
            fetch(`${API_BASE_URL}/products`),
            fetch(`${API_BASE_URL}/categories`)
        ]);
        
        if (!productsResponse.ok || !categoriesResponse.ok) {
            throw new Error('Failed to load data');
        }
        
        products = await productsResponse.json();
        categories = await categoriesResponse.json();
        
    } catch (error) {
        console.warn('Server not available, using mock data');
        await loadMockData();
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function loadMockData() {
    categories = [
        { id: 'all', name: '–í—Å–µ —Ç–æ–≤–∞—Ä—ã', icon: 'üè†' },
        { id: 'electronics', name: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', icon: 'üì±' },
        { id: 'laptops', name: '–ù–æ—É—Ç–±—É–∫–∏', icon: 'üíª' },
        { id: 'audio', name: '–ê—É–¥–∏–æ', icon: 'üéß' },
        { id: 'wearables', name: '–ì–∞–¥–∂–µ—Ç—ã', icon: '‚åö' }
    ];
    
    products = [
        {
            id: 1,
            name: "iPhone 15 Pro",
            price: 99990,
            description: "–ù–æ–≤—ã–π iPhone —Å —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º –∏ –∫–∞–º–µ—Ä–æ–π",
            image: "üì±",
            category: "electronics",
            inStock: true
        },
        {
            id: 2,
            name: "MacBook Air M2",
            price: 129990,
            description: "–ú–æ—â–Ω—ã–π –∏ –ª–µ–≥–∫–∏–π –Ω–æ—É—Ç–±—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞",
            image: "üíª",
            category: "laptops",
            inStock: true
        },
        {
            id: 3,
            name: "AirPods Pro",
            price: 24990,
            description: "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏ —Å –∞–∫—Ç–∏–≤–Ω—ã–º —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ–º",
            image: "üéß",
            category: "audio",
            inStock: true
        },
        {
            id: 4,
            name: "Apple Watch Series 9",
            price: 39990,
            description: "–£–º–Ω—ã–µ —á–∞—Å—ã –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞ –∂–∏–∑–Ω–∏",
            image: "‚åö",
            category: "wearables",
            inStock: true
        }
    ];
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
function updateUserInfo() {
    const userInfo = document.getElementById('userInfo');
    if (currentUser) {
        userInfo.innerHTML = `
            <div>üë§ ${currentUser.first_name} ${currentUser.last_name || ''}</div>
            <div style="font-size: 12px;">@${currentUser.username || '–±–µ–∑ username'}</div>
        `;
    }
}

// –†–µ–Ω–¥–µ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π
function renderCategories() {
    const container = document.getElementById('categoriesNav');
    container.innerHTML = '';
    
    categories.forEach(category => {
        const button = document.createElement('button');
        button.className = `category-btn ${currentCategory === category.id ? 'active' : ''}`;
        button.innerHTML = `${category.icon} ${category.name}`;
        button.onclick = () => switchCategory(category.id);
        container.appendChild(button);
    });
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function switchCategory(categoryId) {
    currentCategory = categoryId;
    renderCategories();
    renderProducts();
}

// –†–µ–Ω–¥–µ—Ä —Ç–æ–≤–∞—Ä–æ–≤
function renderProducts() {
    const container = document.getElementById('productsContainer');
    const emptyState = document.getElementById('emptyState');
    
    container.innerHTML = '';
    
    const filteredProducts = currentCategory === 'all' 
        ? products 
        : products.filter(product => product.category === currentCategory);
    
    if (filteredProducts.length === 0) {
        container.style.display = 'none';
        emptyState.style.display = 'block';
        return;
    }
    
    container.style.display = 'grid';
    emptyState.style.display = 'none';
    
    filteredProducts.forEach(product => {
        if (!product.inStock && product.inStock !== undefined) return;
        
        const productElement = document.createElement('div');
        productElement.className = 'product-card';
        productElement.onclick = () => openProductModal(product);
        
        productElement.innerHTML = `
            <div class="product-image">${product.image}</div>
            <div class="product-category">${getCategoryName(product.category)}</div>
            <div class="product-title">${product.name}</div>
            <div class="product-price">${formatPrice(product.price)}</div>
        `;
        
        container.appendChild(productElement);
    });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function getCategoryName(categoryId) {
    const category = categories.find(cat => cat.id === categoryId);
    return category ? category.name : '–î—Ä—É–≥–æ–µ';
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ç–æ–≤–∞—Ä–∞
function openProductModal(product) {
    const modal = document.getElementById('productModal');
    const title = document.getElementById('modalProductTitle');
    const content = document.getElementById('modalProductContent');

    const cartItem = cart.find(item => item.product.id === product.id);
    const quantity = cartItem ? cartItem.quantity : 0;

    title.textContent = product.name;
    content.innerHTML = `
        <div style="text-align: center; margin-bottom: 20px;">
            <div style="font-size: 48px; margin-bottom: 16px;">${product.image}</div>
            <div style="font-size: 24px; font-weight: 600; color: var(--link-color); margin-bottom: 12px;">
                ${formatPrice(product.price)}
            </div>
            <div style="color: var(--hint-color); font-size: 14px; margin-bottom: 8px;">
                ${getCategoryName(product.category)}
            </div>
        </div>
        <p style="margin-bottom: 20px; color: var(--text-color);">${product.description}</p>
        
        ${product.inStock === false ? `
            <div style="text-align: center; color: var(--error-color); padding: 16px; background: var(--secondary-bg-color); border-radius: 8px; margin-bottom: 16px;">
                üî¥ –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏
            </div>
        ` : `
            <div class="quantity-controls">
                <button class="quantity-btn" onclick="changeQuantity(${product.id}, -1)">-</button>
                <span class="quantity-display">${quantity}</span>
                <button class="quantity-btn" onclick="changeQuantity(${product.id}, 1)">+</button>
            </div>
            
            <button class="btn ${quantity > 0 ? 'btn-success' : ''}" onclick="addToCart(${product.id})">
                ${quantity > 0 ? '‚úÖ –í –∫–æ—Ä–∑–∏–Ω–µ' : '–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É'}
            </button>
        `}
    `;

    modal.style.display = 'flex';
}

// –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
function changeQuantity(productId, delta) {
    const product = products.find(p => p.id === productId);
    if (!product || product.inStock === false) return;

    const existingItem = cart.find(item => item.product.id === productId);
    
    if (existingItem) {
        existingItem.quantity += delta;
        if (existingItem.quantity <= 0) {
            cart = cart.filter(item => item.product.id !== productId);
        }
    } else if (delta > 0) {
        cart.push({
            product: product,
            quantity: 1
        });
    }
    
    updateCartUI();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –µ—Å–ª–∏ –æ–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ
    const modal = document.getElementById('productModal');
    if (modal.style.display === 'flex') {
        const currentProduct = products.find(p => p.id === productId);
        if (currentProduct) openProductModal(currentProduct);
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
function addToCart(productId) {
    changeQuantity(productId, 1);
    showNotification('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É');
}

// –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
function removeFromCart(productId) {
    cart = cart.filter(item => item.product.id !== productId);
    updateCartUI();
    showNotification('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã');
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –∫–æ—Ä–∑–∏–Ω—ã
function updateCartUI() {
    const totalPrice = cart.reduce((sum, item) => sum + (item.product.price * item.quantity), 0);
    const totalCount = cart.reduce((sum, item) => sum + item.quantity, 0);

    document.getElementById('totalPrice').textContent = formatPrice(totalPrice);
    document.getElementById('cartCount').textContent = totalCount;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫–æ—Ä–∑–∏–Ω—ã
    const cartContent = document.getElementById('cartContent');
    if (cart.length === 0) {
        cartContent.innerHTML = '<p style="text-align: center; color: var(--hint-color);">–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</p>';
    } else {
        cartContent.innerHTML = cart.map(item => `
            <div style="display: flex; justify-content: space-between; align-items: center; padding: 12px 0; border-bottom: 1px solid var(--secondary-bg-color);">
                <div style="flex: 1;">
                    <div style="font-weight: 500;">${item.product.name}</div>
                    <div style="color: var(--link-color); font-size: 14px;">
                        ${formatPrice(item.product.price)} √ó ${item.quantity}
                    </div>
                </div>
                <div style="font-weight: 600; margin: 0 12px;">
                    ${formatPrice(item.product.price * item.quantity)}
                </div>
                <button onclick="removeFromCart(${item.product.id})" style="background: none; border: none; color: var(--hint-color); font-size: 20px; cursor: pointer; padding: 4px;">√ó</button>
            </div>
        `).join('');
    }
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
function openCart() {
    if (cart.length === 0) {
        showNotification('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
        return;
    }
    document.getElementById('cartModal').style.display = 'flex';
}

// –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async function proceedToCheckout() {
    if (cart.length === 0) return;

    const orderData = {
        products: cart,
        total: cart.reduce((sum, item) => sum + (item.product.price * item.quantity), 0),
        user: currentUser,
        timestamp: new Date().toISOString()
    };

    const tg = window.Telegram?.WebApp;
    
    if (tg) {
        tg.showPopup({
            title: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞',
            message: `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É ${formatPrice(orderData.total)}`,
            buttons: [
                {id: 'cancel', type: 'cancel', text: '–û—Ç–º–µ–Ω–∞'},
                {id: 'confirm', type: 'default', text: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'}
            ]
        }, async (buttonId) => {
            if (buttonId === 'confirm') {
                await processOrder(orderData);
            }
        });
    } else {
        // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        if (confirm(`–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑ –Ω–∞ —Å—É–º–º—É ${formatPrice(orderData.total)}`)) {
            await processOrder(orderData);
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞
async function processOrder(orderData) {
    showLoading(true);
    
    try {
        const response = await fetch(`${API_BASE_URL}/orders`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(orderData)
        });

        let orderResult;
        
        if (response.ok) {
            orderResult = await response.json();
            showNotification('‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!');
            cart = [];
            updateCartUI();
            closeModal();
        } else {
            throw new Error('Order failed');
        }
        
    } catch (error) {
        console.error('Order error:', error);
        showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞');
    } finally {
        showLoading(false);
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function formatPrice(price) {
    return new Intl.NumberFormat('ru-RU', {
        style: 'currency',
        currency: 'RUB'
    }).format(price);
}

function closeModal() {
    document.querySelectorAll('.modal').forEach(modal => {
        modal.style.display = 'none';
    });
}

function showLoading(show) {
    document.getElementById('loadingIndicator').classList.toggle('loading', show);
}

function showNotification(message) {
    // –í Telegram Mini Apps
    if (window.Telegram?.WebApp) {
        window.Telegram.WebApp.showPopup({
            title: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
            message: message
        });
        return;
    }
    
    // –í –±—Ä–∞—É–∑–µ—Ä–µ
    const notification = document.createElement('div');
    notification.className = 'notification';
    notification.textContent = message;
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.remove();
    }, 2000);
}

function showError(message) {
    if (window.Telegram?.WebApp) {
        window.Telegram.WebApp.showPopup({
            title: '–û—à–∏–±–∫–∞',
            message: message
        });
    } else {
        alert('–û—à–∏–±–∫–∞: ' + message);
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
document.addEventListener('DOMContentLoaded', initApp);

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
document.querySelectorAll('.modal').forEach(modal => {
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeModal();
        }
    });
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ ESC
document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
        closeModal();
    }
});